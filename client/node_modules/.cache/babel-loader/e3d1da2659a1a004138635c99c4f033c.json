{"ast":null,"code":"var _jsxFileName = \"C:\\\\web3\\\\assignment2-web3\\\\comp4513-assignment2\\\\client\\\\src\\\\components\\\\TabComponent\\\\TextTab.jsx\";\nimport React from \"react\";\nimport Highlighter from \"react-highlight-words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextTab = props => {\n  if (props.currentSpeaker === \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TextTab\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.playInfo.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" \", props.currentAct]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", props.currentScene]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"sceneSpeeches\",\n        children: props.playInfo.acts.map(a => {\n          if (a.name === props.currentAct) {\n            return a.scenes.map((s, index) => {\n              if (s.name === props.currentScene) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: \"actSceneDirection\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: [\" \", s.title, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 20,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: [\" \", s.stageDirection]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 21,\n                    columnNumber: 23\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 19,\n                  columnNumber: 21\n                }, this);\n              }\n            });\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TextTab\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.playInfo.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" \", props.currentAct]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", props.currentScene]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"speakerSpeeches\",\n        children: props.playInfo.acts.map(a => {\n          if (a.name === props.currentAct) {\n            return a.scenes.map(s => {\n              if (s.name === props.currentScene) {\n                return s.speeches.map((speeches, index) => {\n                  if (speeches.speaker === props.currentSpeaker) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Highlighter, {\n                        searchWords: [props.highlightedWord],\n                        textToHighlight: String(speeches.speaker)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 48,\n                        columnNumber: 27\n                      }, this), \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 52,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(Highlighter, {\n                        searchWords: [props.highlightedWord],\n                        textToHighlight: String(speeches.lines)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 53,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 57,\n                        columnNumber: 27\n                      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 57,\n                        columnNumber: 34\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 47,\n                      columnNumber: 25\n                    }, this);\n                  }\n                });\n              }\n            });\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = TextTab;\nexport default TextTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextTab\");","map":{"version":3,"sources":["C:/web3/assignment2-web3/comp4513-assignment2/client/src/components/TabComponent/TextTab.jsx"],"names":["React","Highlighter","TextTab","props","currentSpeaker","playInfo","title","currentAct","currentScene","acts","map","a","name","scenes","s","index","stageDirection","speeches","speaker","highlightedWord","String","lines"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEzB,MAAIA,KAAK,CAACC,cAAN,KAAyB,EAA7B,EAAiC;AAC/B,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA,kBAAKD,KAAK,CAACE,QAAN,CAAeC;AAApB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wBAAMH,KAAK,CAACI,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,wBAAMJ,KAAK,CAACK,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAK,QAAA,EAAE,EAAC,eAAR;AAAA,kBACGL,KAAK,CAACE,QAAN,CAAeI,IAAf,CAAoBC,GAApB,CAAyBC,CAAD,IAAO;AAC9B,cAAIA,CAAC,CAACC,IAAF,KAAWT,KAAK,CAACI,UAArB,EAAiC;AAC/B,mBAAOI,CAAC,CAACE,MAAF,CAASH,GAAT,CAAa,CAACI,CAAD,EAAIC,KAAJ,KAAc;AAChC,kBAAID,CAAC,CAACF,IAAF,KAAWT,KAAK,CAACK,YAArB,EAAmC;AACjC,oCACE;AAAK,kBAAA,EAAE,EAAC,mBAAR;AAAA,0CACE;AAAA,oCAAMM,CAAC,CAACR,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAA,oCAAMQ,CAAC,CAACE,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA,mBAAiCD,KAAjC;AAAA;AAAA;AAAA;AAAA,wBADF;AAMD;AACF,aATM,CAAP;AAUD;AACF,SAbA;AADH;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD,GAzBD,MAyBO;AAEL,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA,kBAAKZ,KAAK,CAACE,QAAN,CAAeC;AAApB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wBAAMH,KAAK,CAACI,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,wBAAMJ,KAAK,CAACK,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAK,QAAA,EAAE,EAAC,iBAAR;AAAA,kBACGL,KAAK,CAACE,QAAN,CAAeI,IAAf,CAAoBC,GAApB,CAAyBC,CAAD,IAAO;AAC9B,cAAIA,CAAC,CAACC,IAAF,KAAWT,KAAK,CAACI,UAArB,EAAiC;AAC/B,mBAAOI,CAAC,CAACE,MAAF,CAASH,GAAT,CAAcI,CAAD,IAAO;AACzB,kBAAIA,CAAC,CAACF,IAAF,KAAWT,KAAK,CAACK,YAArB,EAAmC;AACjC,uBAAOM,CAAC,CAACG,QAAF,CAAWP,GAAX,CAAe,CAACO,QAAD,EAAWF,KAAX,KAAqB;AACzC,sBAAIE,QAAQ,CAACC,OAAT,KAAqBf,KAAK,CAACC,cAA/B,EAA+C;AAC7C,wCACE;AAAA,8CACE,QAAC,WAAD;AACE,wBAAA,WAAW,EAAE,CAACD,KAAK,CAACgB,eAAP,CADf;AAEE,wBAAA,eAAe,EAAEC,MAAM,CAACH,QAAQ,CAACC,OAAV;AAFzB;AAAA;AAAA;AAAA;AAAA,8BADF,oBAKE;AAAA;AAAA;AAAA;AAAA,8BALF,eAME,QAAC,WAAD;AACE,wBAAA,WAAW,EAAE,CAACf,KAAK,CAACgB,eAAP,CADf;AAEE,wBAAA,eAAe,EAAEC,MAAM,CAACH,QAAQ,CAACI,KAAV;AAFzB;AAAA;AAAA;AAAA;AAAA,8BANF,eAUE;AAAA;AAAA;AAAA;AAAA,8BAVF,oBAUS;AAAA;AAAA;AAAA;AAAA,8BAVT;AAAA,uBAAUN,KAAV;AAAA;AAAA;AAAA;AAAA,4BADF;AAcD;AACF,iBAjBM,CAAP;AAkBD;AACF,aArBM,CAAP;AAsBD;AACF,SAzBA;AADH;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoCD;AACF,CAlED;;KAAMb,O;AAmEN,eAAeA,OAAf","sourcesContent":["import React from \"react\";\r\nimport Highlighter from \"react-highlight-words\";\r\n\r\nconst TextTab = (props) => {\r\n\r\n  if (props.currentSpeaker === \"\") {\r\n    return (\r\n      <div className=\"TextTab\">\r\n        <h1>{props.playInfo.title}</h1>\r\n        <h2> {props.currentAct}</h2>\r\n        <h3> {props.currentScene}</h3>\r\n        <hr></hr>\r\n        <div id=\"sceneSpeeches\">\r\n          {props.playInfo.acts.map((a) => {\r\n            if (a.name === props.currentAct) {\r\n              return a.scenes.map((s, index) => {\r\n                if (s.name === props.currentScene) {\r\n                  return (\r\n                    <div id=\"actSceneDirection\" key={index}>\r\n                      <h4> {s.title} </h4>\r\n                      <h4> {s.stageDirection}</h4>\r\n                    </div>\r\n                  );\r\n                }\r\n              });\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    \r\n    return (\r\n      <div className=\"TextTab\">\r\n        <h1>{props.playInfo.title}</h1>\r\n        <h2> {props.currentAct}</h2>\r\n        <h3> {props.currentScene}</h3>\r\n        <hr></hr>\r\n        <div id=\"speakerSpeeches\">\r\n          {props.playInfo.acts.map((a) => {\r\n            if (a.name === props.currentAct) {\r\n              return a.scenes.map((s) => {\r\n                if (s.name === props.currentScene) {\r\n                  return s.speeches.map((speeches, index) => {\r\n                    if (speeches.speaker === props.currentSpeaker) {\r\n                      return (\r\n                        <div key={index}>\r\n                          <Highlighter\r\n                            searchWords={[props.highlightedWord]}\r\n                            textToHighlight={String(speeches.speaker)}\r\n                          />:\r\n                          <br /> \r\n                          <Highlighter\r\n                            searchWords={[props.highlightedWord]}\r\n                            textToHighlight={String(speeches.lines)}\r\n                          />\r\n                          <br /> <br />\r\n                        </div>\r\n                      );\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default TextTab;\r\n"]},"metadata":{},"sourceType":"module"}